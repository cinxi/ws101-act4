ดเตพ เดธเตเดทเตเดชเตเดคเดฟเดฏเดฟเดฒเตเดเตเดเต เดชเตเดเตเดจเตเดจเตเดเดพเดฌเตเดเดณเตเดเต เดชเตเดฐเดเดเดจเดเดเดฐเตเดเตเดฏเดเดฐเดเดเดจเดพเดฐเตเดเตเดฏเดเดฐเด - เดเดฏเตผเดจเตเดจ เดเดชเดฏเตเดเดเดเดฏเตผเดจเตเดจ เดฎเตเดฎเตเดฎเดฑเดฟ เดเดชเดฏเตเดเด เดเดฃเตเดเตเดคเตเดคเดฟเดเดฏเตผเดจเตเดจ CPU เดเดชเดฏเตเดเด เดเดฃเตเดเตเดคเตเดคเดฟเดเดฏเตผเดจเตเดจ เดฎเตเดฎเตเดฎเดฑเดฟ, CPU เดเดชเดฏเตเดเด เดเดฃเตเดเตเดคเตเดคเดฟเดเดพเดฃเดฟเดเตเดเดฟเดฐเดฟเดเตเดเตเดจเตเดจ เดชเตเดฐเดเดเดจ เดตเดฟเดตเดฐเดเตเดเตพ เดเดชเดฏเตเดเดชเตเดฐเดฆเดฎเดฒเตเดฒเดชเดเตเดเดฟเดเตเด เดธเตเดฐเดเตเดทเดพ เดตเดฟเดตเดฐเดเตเดเตพ เดเดชเดฏเตเดเดชเตเดฐเดฆเดฎเดฒเตเดฒเดเดจเดฟเดเตเดเต เดงเดพเดฐเดพเดณเด เดเดฑเดฟเดฏเดฟเดชเตเดชเตเดเตพ เดฒเดญเดฟเดเตเดเตเดจเตเดจเตเดจเดฟเดเตเดเตพ เดเดจเตเดคเตเดเตเดฃเตเดเต เดธเดเดคเตเดชเตเดคเดฐเดฒเตเดฒ เดเดจเตเดจเต เดเดเตเดเดณเตเดเต เดชเดฑเดฏเดพเดฎเต:Microsoft Edge เดเดเตเดเดจเตเดฏเดพเดฃเต เดเดจเตเดฑเต เดเดชเดเดฐเดฃเดคเตเดคเดฟเดจเตเดฑเต CPU-เดตเตเด เดฎเตเดฎเตเดฎเดฑเดฟเดฏเตเด เดฎเตเดเตเดเดชเตเดชเตเดเตเดเดคเดพเดฏเดฟ เดเดชเดฏเตเดเดฟเดเตเดเตเดจเตเดจเดคเตเดจเตเดจเต เดเดพเตป เดเดพเดฃเตเดจเตเดจเตเดเดพเตป เดเตบเดฒเตเดจเดฟเดฒเดพเดฏเดฟเดฐเดฟเดเตเดเตเดฎเตเดชเตเตพ เดเดจเตเดจเต เดธเตเดฐเดเตเดทเดฟเดคเดฎเดพเดฏเดฟ เดจเดฟเดฒเดจเดฟเตผเดคเตเดคเดพเตป Microsoft Edge เดเดเตเดเดจเต เดธเดนเดพเดฏเดฟเดเตเดเตเดจเตเดจเตเดตเตเดจเตเดจเต เดเดพเตป เดเดทเตเดเดชเตเดชเตเดเตเดจเตเดจเตเดจเดฟเดเตเดเตพ เดคเตเดชเตเดคเดฐเดพเดฃเตเดจเตเดจเต เดเดจเตเดคเตเดเตเดฃเตเดเดพเดฃเตเดจเตเดจเต เดเดเตเดเดณเตเดเต เดชเดฑเดฏเตเด:เดฌเตเดฐเตเดธเตผ เดเดธเตปเดทเตเดฏเตฝเดธเดฟเตฝ เดธเดเดคเตเดชเตเดคเดจเดพเดฃเต?RewardsIE เดชเตเดจเดชเตเดฐเดตเดฐเตโเดคเตเดคเดจ เดกเดฏเดฒเตเดเตเด เดตเตเดฌเตเดธเตเดฑเตเดฑเต Internet Explorer-เตฝ เดชเตเดฐเดตเตผเดคเตเดคเดฟเดเตเดเดฟเดฒเตเดฒเด เดตเตเดฌเตเดธเตเดฑเตเดฑเต Microsoft Edge-เตฝ เดฎเดฟเดเดเตเดเดคเดพเดฏเดฟ เดชเตเดฐเดตเตผเดคเตเดคเดฟเดเตเดเตเดจเตเดจเตเดฎเดฟเดเดเตเด เดตเตเดเดคเดฏเตเด เดชเตเดฐเดเดเดจ เดจเดฟเดฒเดตเดพเดฐเดตเตเด เดธเตเดฐเดเตเดทเดฏเตเด เดเดจเตเดญเดตเดฟเดเตเดเตเดจเตเดจเดคเดฟเดจเดพเดฏเดฟ Microsoft Edge-เตฝ เดคเตเดเดฐเดพเตป Microsoft เดถเตเดชเดพเตผเดถเตเดถ เดเตเดฏเตเดฏเตเดจเตเดจเต.เดจเดฟเดเตเดเตพ เดเดชเตเดชเตเตพ Microsoft Edge- เตฝ เดฌเตเดฐเตเดธเต เดเตเดฏเตเดฏเตเดจเตเดจเตเดเดคเต เดธเดเดญเดตเดฟเดเตเดเตเดฎเตเดชเตเดดเตเดฒเตเดฒเดพเด, Internet Explorer-เตฝ เดจเดฟเดจเตเดจเต เดเดจเตเดฑเต เดฌเตเดฐเตเดธเดฟเดเดเต เดกเดพเดฑเตเดฑเดฏเตเด เดคเดพเตฝเดชเตเดชเดฐเตเดฏเดเตเดเดณเตเด เดเตเดฃเตเดเตเดตเดจเตเดจเต เดคเดเดธเดชเตเดชเตเดเตเดคเตเดคเดฒเตเดเตพ เดเดดเดฟเดตเดพเดเตเดเตเดInPrivate windows เดเดเดฏเตเดเตเดเตเดเดเตเดฐเดฎเตเดเดฐเดฃเดเตเดเตพ เดเดเตเดธเดธเต เดเตเดฏเตเดฏเตเดจเตเดจเดคเดฟเดจเต InPrivate windows เดเดเดเตเดเดฟเดฐเดฟเดเตเดเดฃเด. เดเดต เดเดชเตเดชเตเตพ เดเดเดฏเตเดเตเดเดพเตป เดจเดฟเดเตเดเตพ เดเดทเดเดชเตเดชเตเดเตเดจเตเดจเตเดฃเตเดเต?เดเตเดฐเตเดกเตปเดทเตเดฏเดฒเตเดเตพ เดเดตเดถเตเดฏเดฎเดพเดฃเตXbox-เตฝ เดธเดฎเดจเตเดตเดฏเด เดชเตเดฐเดพเดชเตเดคเดฎเดพเดเตเดเตเดจเตเดจเดคเดฟเดจเต เดจเดฟเดเตเดเดณเตเดเต PIN เดจเตฝเดเดฃเด.เดเดฎเดพเตปเดกเต เดชเดพเดฒเดฑเตเดฑเต เดเดเตเดเดฟเดเดเตเดเตพเดเดพเดฒเดเด เดเดเดฏเตเดเตเดเตเดจเตเดจเดคเดฟเดจเต, เดเดพเดฒเดเดคเตเดคเดฟเดจเต เดชเตเดฑเดคเตเดคเต เดเตเดฒเดฟเดเตเดเต เดเตเดฏเตเดฏเตเด เดเดฒเตเดฒเตเดเตเดเดฟเตฝ ESC เดเต เดคเดฟเดฐเดเตเดเตเดเตเดเตเดเตเด.เดเดฎเดพเตปเดกเตเดเดณเตเดเต เดเดฐเต เดฒเดฟเดธเตเดฑเตเดฑเต เดฒเดญเดฟเดเตเดเตเดจเตเดจเดคเดฟเดจเต "เดเดคเดฟเดจเตเดเตเดเดพเดณเตโ เดเตเดเตเดคเดฒเตโ" เดเดจเตเดจ เดเดฟเดนเตเดจเด เดจเตฝเดเตเด เดเดฒเตเดฒเตเดเตเดเดฟเตฝ เดชเตเดชเตเดชเต-เดเดชเตเดชเต เดฒเดฟเดธเตเดฑเตเดฑเตเดฌเตเดเตเดธเดฟเตฝ เดธเดนเดพเดฏเด เดเดพเดฃเดฟเดเตเดเตเดจเตเดจเดคเดฟเดจเต "เด       break;
        case '+':
            for (let i = chompStart; i < lines.length; ++i)
                value += '\n' + lines[i][0].slice(trimIndent);
            if (value[value.length - 1] !== '\n')
                value += '\n';
            break;
        default:
            value += '\n';
    }
    const end = start + header.length + scalar.source.length;
    return { value, type, comment: header.comment, range: [start, end, end] };
}
function parseBlockScalarHeader({ offset, props }, strict, onError) {
    /* istanbul ignore if should not happen */
    if (props[0].type !== 'block-scalar-header') {
        onError(props[0], 'IMPOSSIBLE', 'Block scalar header not found');
        return null;
    }
    const { source } = props[0];
    const mode = source[0];
    let indent = 0;
    let chomp = '';
    let error = -1;
    for (let i = 1; i < source.length; ++i) {
        const ch = source[i];
        if (!chomp && (ch === '-' || ch === '+'))
            chomp = ch;
        else {
            const n = Number(ch);
            if (!indent && n)
                indent = n;
            else if (error === -1)
                error = offset + i;
        }
    }
    if (error !== -1)
        onError(error, 'UNEXPECTED_TOKEN', `Block scalar header includes extra characters: ${source}`);
    let hasSpace = false;
    let comment = '';
    let length = source.length;
    for (let i = 1; i < props.length; ++i) {
        const token = props[i];
        switch (token.type) {
            case 'space':
                hasSpace = true;
            // fallthrough
            case 'newline':
                length += token.source.length;
                break;
            case 'comment':
                if (strict && !hasSpace) {
                    const message = 'Comments must be separated from other tokens by white space characters';
                    onError(token, 'MISSING_CHAR', message);
                }
                length += token.source.length;
                comment = token.source.substring(1);
                break;
            case 'error':
                onError(token, 'UNEXPECTED_TOKEN', token.message);
                length += token.source.length;
                break;
            /* istanbul ignore next should not happen */
            default: {
                const message = `Unexpected token in block scalar header: ${token.type}`;
                onError(token, 'UNEXPECTED_TOKEN', message);
                const ts = token.source;
                if (ts && typeof ts === 'string')
                    length += ts.length;
            }
        }
    }
    return { mode, indent, chomp, comment, length };
}
/** @returns Array of lines split up as `[indent, content]` */
function splitLines(source) {
    const split = source.split(/\n( *)/);
    const first = split[0];
    const m = first.match(/^( *)/);
    const line0 = m?.[1]
        ? [m[1], first.slice(m[1].length)]
        : ['', first];
    const lines = [line0];
    for (let i = 1; i < split.length; i += 2)
        lines.push([split[i], split[i + 1]]);
    return lines;
}

export { resolveBlockScalar };
