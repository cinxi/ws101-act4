import { Minipass } from 'minipass';
import { Path } from 'path-scurry';
import type { GlobOptions, GlobOptionsWithFileTypesFalse, GlobOptionsWithFileTypesTrue, GlobOptionsWithFileTypesUnset } from './glob.js';
import { Glob } from './glob.js';
/**
 * Syncronous form of {@link globStream}. Will read all the matches as fast as
 * you consume them, even all in a single tick if you consume them immediately,
 * but will still respond to backpressure if they're not consumed immediately.
 */
export declare function globStreamSync(pattern: string | string[], options: GlobOptionsWithFileTypesTrue): Minipass<Path, Path>;
export declare function globStreamSync(pattern: string | string[], options: GlobOptionsWithFileTypesFalse): Minipass<string, string>;
export declare function globStreamSync(pattern: string | string[], options: GlobOptionsWithFileTypesUnset): Minipass<string, string>;
export declare function globStreamSync(pattern: string | string[], options: GlobOptions): Minipass<Path, Path> | Minipass<string, string>;
/**
 * Return a stream that emits all the strings or `Path` objects and
 * then emits `end` when completed.
 */
export declare function globStream(pattern: string | string[], options: GlobOptionsWithFileTypesFalse): Minipass<string, string>;
export declare function globStream(pattern: string | string[], options: GlobOptionsWithFileTypesTrue): Minipass<Path, Path>;
export declare function globStream(pattern: string | string[], options?: GlobOptionsWithFileTypesUnset | undefined): Minipass<string, string>;
export declare function globStream(pattern: string | string[], options: GlobOptions): Minipass<Path, Path> | Minipass<string, string>;
/**
 * Synchronous form of {@link glob}
 */
export declare function globSync(pattern: string | string[], options: GlobOptionsWithFileTypesFalse): string[];
export declare function globSync(pattern: string | string[], options: GlobOptionsWithFileTypesTrue): Path[];
export declare function globSync(pattern: string | string[], options?: GlobOptionsWithFileTypesUnset | undefined): string[];
export declare function globSync(pattern: string | string[], options: GlobOptions): Path[] | string[];
/**
 * Perform an asynchronous glob search for the pattern(s) specified. Returns
 * [Path](https://isaacs.github.io/path-scurry/classes/PathBase) objects if the
 * {@link withFileTypes} option is set to `true`. See {@link GlobOptions} for
 * full option descriptions.
 */
declare function glob_(pattern: string | string[], options?: GlobOptionsWithFileTypesUnset | undefined): Promise<string[]>;
declare function glob_(pattern: string | string[], options: GlobOptionsWithFileTypesTrue): Promise<Path[]>;
declare function glob_(pattern: string | string[], options: GlobOptionsWithFileTypesFalse): Promise<string[]>;
declare function glob_(pattern: string | string[], options: GlobOptions): Promise<Path[] | string[]>;
/**
 * Return a sync iterator for walking glob pattern matches.
 */
export declare function globIterateSync(pattern: string | string[], options?: GlobOptionsWithFileTypesUnset | undefined): Generator<string, void, void>;
export declare function globIterateSync(pattern: string | string[], options: GlobOptionsWithFileTypesTrue): Generator<Path, void, void>;
export declare function globIterateSync(pattern: string | string[], options: GlobOptionsWithFileTypesFalse): Generator<string, void, void>;
export declare function globIterateSync(pattern: string | string[], options: GlobOptions): Generator<Path, void, void> | Generator<string, void, void>;
/**
 * Return an async iterator for walking glob pattern matches.
 */
export declare function globIterate(pattern: string | string[], options?: GlobOptionsWithFileTypesUnset | undefined): AsyncGenerator<string, void, void>;
export declare function globIterate(pattern: string | string[], options: GlobOptionsWithFileTypesTrue): AsyncGenerator<Path, void, void>;
export declare function globIterate(pattern: string | string[], options: GlobOptionsWithFileTypesFalse): AsyncGenerator<string, void, void>;
export declare function globIterate(pattern: string | string[adblock_facebook": {
      "description": "Title for link to AdBlock's Facebook account",
      "message": "AdBlockin Facebook"
   },
   "adblock_home": {
      "description": "Text in the alt attribute of an AdBlock logo / icon that links to getadblock.com.",
      "message": "AdBlock-koti"
   },
   "adblock_logo": {
      "description": "Text in the alt attribute of an AdBlock logo image.",
      "message": "AdBlock-logo"
   },
   "adblock_looked_like_this": {
      "description": "Part 1 of a call-to-action on the Popup menu",
      "message": "Mitäpä, jos AdBlock näyttäisi tältä?"
   },
   "adblock_newsletter": {
      "description": "Text of a Options page lower menu button",
      "message": "AdBlockin uutiskirje"
   },
   "adblock_premium": {
      "description": "Full name of the AdBlock upgrade.",
      "message": "AdBlock Premium"
   },
   "adblock_twitter": {
      "description": "Title for link to AdBlock's Twitter account",
      "message": "AdBlockin Twitter"
   },
   "adblock_vpn": {
      "description": "Text of a Options page lower menu button",
      "message": "AdBlock VPN"
   },
   "adblock_website": {
      "description": "Title for link to AdBlock's website",
      "message": "AdBlockin verkkosivusto"
   },
   "adblock_will_block_ads_again": {
      "description": "Second sentence in the aria-label of the pop-up menu action to resume blocking ads.",
      "message": "Painamalla tästä AdBlock estää taas mainokset."
   },
   "adblock_will_pause_on_all_sites": {
      "description": "Second sentence in the aria-label of the pop-up menu action to pause blocking ads on all sites.",
      "message": "Painamalla tästä AdBlock pysäyttää mainoseston kaikilla sivustoilla."
   },
   "adblock_will_pause_on_this_site": {
      "description": "Second sentence in the aria-label of the pop-up menu action to pause blocking ads on this site.",
      "message": "Painamalla tästä AdBlock pysäyttää mainoseston tällä sivustolla."
  